var store = [{
        "title": "Maquina Headless",
        "excerpt":"     En esta máquina primero que nada se tuvo que hacer un análisis para poder obtener información sobre los puertos que estaba abierto para ello se llevó a cabo el uso NMAP, en el cual se hace con el siguiente comando:   nmap -p- -sC -vvv –min-rate 5000 -n 10.10.11.8            -p-: Este parámetro indica que Nmap debe escanear todos los puertos, del 1 al 65535. Normalmente, Nmap escanea solo los 1000 puertos más comunes si no se especifica ningún rango de puertos.            -sC: Este parámetro habilita el uso de los scripts Nmap Scripting Engine (NSE) con la opción de script predeterminado. Los scripts NSE pueden realizar una variedad de tareas, como la detección de versiones de servicios y la identificación de vulnerabilidades.            -vvv: Este parámetro aumenta la verbosidad del escaneo, proporcionando información detallada sobre el progreso del escaneo y los resultados. Cuantos más “v” se añadan, más detallada será la salida.            –-min-rate 5000: Este parámetro establece la tasa mínima de paquetes por segundo que Nmap debería enviar, en este caso, 5000 paquetes por segundo. Esto hace que el escaneo sea más rápido, pero puede generar tráfico de red considerable y posiblemente ser detectado como un comportamiento sospechoso por sistemas de detección de intrusos (IDS).            -n: Este parámetro deshabilita la resolución de nombres de dominio inversa. Esto significa que Nmap no intentará resolver direcciones IP a nombres de host, lo que puede acelerar el escaneo.       Resultados obtenidos:        En la captura podemos ver que solo tenemos abiertos dos puertos el cual uno es el puerto 22 y el otro el 5000, cual sabemos las siguientes características:   Puerto 22      Protocolo: TCP   Servicio común: SSH (Secure Shell)   Uso principal: El puerto 22 es conocido por el protocolo SSH, que proporciona una forma segura de conectarse a otro ordenador a través de una red no segura. SSH permite el acceso remoto a servidores, la transferencia segura de archivos mediante SCP (Secure Copy) y SFTP (SSH File Transfer Protocol), así como la ejecución remota de comandos. SSH es esencial en la administración de sistemas y servidores, especialmente en entornos Linux y Unix.   Puerto 5000      Protocolo: TCP/UDP   Servicios comunes:            UPnP (Universal Plug and Play): Este protocolo, utilizado principalmente en redes domésticas, permite que dispositivos en una red se descubran y se comuniquen automáticamente entre sí. UPnP facilita la configuración de redes y la conectividad entre dispositivos sin intervención manual significativa.       Docker: En el contexto de Docker, un sistema de contenedores de aplicaciones, el puerto 5000 se usa comúnmente como el puerto predeterminado para el registro privado de Docker (Docker Registry). Un Docker Registry es un repositorio para almacenar y distribuir imágenes Docker.       Flask: En el desarrollo web con Python, el marco Flask puede usar el puerto 5000 como su puerto predeterminado para ejecutar aplicaciones web durante el desarrollo.           Uso principal: Dado que el puerto 5000 no está asignado de manera oficial a un servicio específico por la IANA (Internet Assigned Numbers Authority), puede ser utilizado por diferentes aplicaciones y servicios según las necesidades de los usuarios y desarrolladores. Sin embargo, los usos mencionados arriba son algunos de los más comunes.   A continuación, procedemos a obtener más información de los puertos usando nmap esto se hace principalmente para que no se demore demasiado tiempo en obtener la información:   nmap -p22,5000 -A -Pn -vvv 10.10.11.8      -p22,5000: Esta opción especifica los puertos que deseas escanear. En este caso, Nmap escaneará los puertos 22 (usualmente usado por SSH) y 5000. Puedes especificar un rango de puertos o una lista separada por comas.   -A: Esta opción activa la detección avanzada. Incluirá:            Detección de sistema operativo.       Detección de versión de servicio.       Escaneo de scripts.       Rastreo de ruta (traceroute).           -Pn: Esta opción le dice a Nmap que no haga un “ping” previo a los hosts para ver si están activos. Por defecto, Nmap hace un ping para determinar si un host está activo antes de escanearlo. Con -Pn, Nmap escaneará los puertos incluso si el host no responde a los pings.        En esta captura podemos ver algo interesante, primero que nada, podemos ver que en el puerto 22 si bien nos muestra la versión en el cual está trabajando el problema radica que no hay vulnerabilidad aparente, es decir si va al internet no hay ningún tipo de exploit que se puede usar para conectarse, así que el único puerto que queda disponible es el 5000 sin embargo este solo se usa para alojar el acceso a la página web así que no hay manera de explotar una vulnerabilidad.   Solo queda ingresar a la página:        En este caso procedemos a buscar páginas que puedan estar ocultas apartir de la URL, para eso usamos FUZZ        ","categories": ["HackTheBox"],
        "tags": ["puerto 5000","nmap"],
        "url": "/hackthebox/Maquina-Headless/",
        "teaser": "/assets/images/MaquinaHeadless/headless.png"
      },{
        "title": "Personalización de un entorno de trabajo Linux.",
        "excerpt":"Personalización de Linux  Instalación de  ZSH para eso vamos a usar el siguiente comando:   apt install zsh  Opcionalmente, se puede instalar oh-my-zsh   sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"   Powerlevel10k  El tema preferido para la terminal es powerlevel10k   Guía de instalación.     Fuentes que se deben instalar:            MesloLGS NF Regular.ttf       MesloLGS NF Bold.ttf       MesloLGS NF Italic.ttf       MesloLGS NF Bold Italic.ttf           Instalación            Manual:           git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k   echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &gt;&gt;~/.zshrc                       Usando Oh My Zsh           git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k                  En el archivo ~/.zshrc se debe agregar el tema en el caso de a ver usado Oh My Zsh ZSH_THEME=\"powerlevel10k/powerlevel10k\"               Para restaurar ZSH se debe usar el siguiente comando:           exec zsh                       Para modificar el tema se usa:           p10k configure                           Instalación de plugins  Hay dos plugin muy usados cuáles son:     zsh-autosuggestions     git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions           zsh-syntax-highlighting     git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting            En el archivo .zshrc se modificará lo siguiente:   plugins=(git     zsh-autosuggestions     zsh-syntax-highlighting  )   Alias de bat  En este caso se utiliza la herramienta bat la cual tiene una función parecida al comando cat, sin embargo, este tiene una presentación más elegante y más visual, por lo cual se opta por modificar el comando cat usando el alias en .zshrc   Para la instalación de esta herramienta se puede instalar con el siguiente comando.  sudo apt install bat  o bien se puede descargar la última versión para ello se instala de la siguiente manera.  sudo apt install ./nombre_del_archivo.deb  Dentro del archivo .zshrc se agrega el siguiente alias:  alias cat='/bin/bat' alias catn='/bin/cat' alias  catln='/bin/bat --paging=never'  Así es como se ve nuestra terminal usando esta herramienta:      En algunos casos se necesita copiar cosas de la terminal, así que para eso se configuró otro alias como catn       Alias de lsb   alias ls='lsd' alias l='ls -l' alias la='ls -a' alias lla='ls -la' alias lt='ls --tree'   Configuración personal de .zshrc   # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc. # Initialization code that may require console input (password prompts, [y/n] # confirmations, etc.) must go above this block; everything else may go below. if [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then   source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" fi  # If you come from bash you might have to change your $PATH. # export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH  # Path to your oh-my-zsh installation. export ZSH=\"$HOME/.oh-my-zsh\"  # Set name of the theme to load --- if set to \"random\", it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes ZSH_THEME=\"powerlevel10k/powerlevel10k\"  #alias  alias cat='/bin/bat' alias catn='/bin/cat' alias  catln='/bin/bat --paging=never' #configuracion de lsd -&gt; ls #alias ll='/usr/bin/lsd -lh --group-dirs=first' #alias la='/usr/bin/lsd -a --group-dirs=first' #alias l='/usr/bin/lsd --group-dirs=first' #alias lla='/usr/bin/lsd -lha --group-dirs=first' #alias ls='/usr/bin/lsd --group-dirs=first'  #echo \"Alias de lsd cargados\" #alias ls='lsd' #alias l='ls -l' #alias la='ls -a' #alias lla='ls -la' #alias lt='ls --tree'   # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )  # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\"true\"  # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\"true\"  # Uncomment one of the following lines to change the auto-update behavior # zstyle ':omz:update' mode disabled  # disable automatic updates # zstyle ':omz:update' mode auto      # update automatically without asking # zstyle ':omz:update' mode reminder  # just remind me to update when it's time  # Uncomment the following line to change how often to auto-update (in days). # zstyle ':omz:update' frequency 13  # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\"true\"  # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\"true\"  # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\"true\"  # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\"true\"  # Uncomment the following line to display red dots whilst waiting for completion. # You can also set it to another string to have that shown instead of the default red dots. # e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\" # Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765) # COMPLETION_WAITING_DOTS=\"true\"  # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\"true\"  # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\" # or set a custom format using the strftime function format specifications, # see 'man strftime' for details. # HIST_STAMPS=\"mm/dd/yyyy\"  # Would you like to use another custom folder than $ZSH/custom? # ZSH_CUSTOM=/path/to/new-custom-folder  # Which plugins would you like to load? # Standad plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=(git \tzsh-autosuggestions \tzsh-syntax-highlighting  )  source $ZSH/oh-my-zsh.sh    # User configuration ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor) ZSH_HIGHLIGHT_STYLES[command]='fg=blue,bold' ZSH_HIGHLIGHT_STYLES[builtin]='fg=green,bold'     # export MANPATH=\"/usr/local/man:$MANPATH\"  # You may need to manually set your language environment # export LANG=en_US.UTF-8  # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then #   export EDITOR='vim' # else #   export EDITOR='mvim' # fi  # Compilation flags # export ARCHFLAGS=\"-arch x86_64\"  # Set personal aliases, overriding those provided by oh-my-zsh libs, # plugins, and themes. Aliases can be placed here, though oh-my-zsh # users are encouraged to define aliases within the ZSH_CUSTOM folder. # For a full list of active aliases, run `alias`. # # Example aliases # alias zshconfig=\"mate ~/.zshrc\" # alias ohmyzsh=\"mate ~/.oh-my-zsh\" alias ls='lsd' alias l='ls -l' alias la='ls -a' alias lla='ls -la' alias lt='ls --tree'  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh. [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh   eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\" # Instalar gemas en ~/.gem export GEM_HOME=\"$HOME/.gem\" export PATH=\"$HOME/.gem/bin:$PATH\"  ","categories": ["Linux"],
        "tags": ["Linux","Personalización"],
        "url": "/linux/Personalizacion/",
        "teaser": "/assets/images/PersonalizacionLinux/painter-penguin.svg"
      }]
