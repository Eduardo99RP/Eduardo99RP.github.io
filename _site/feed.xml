<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-09T19:14:38-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BlogPersonal</title><subtitle>post de proyectos</subtitle><author><name>Eduardo Rivera</name></author><entry><title type="html">Personalización de un entorno de trabajo Linux.</title><link href="http://localhost:4000/linux/Personalizacion/" rel="alternate" type="text/html" title="Personalización de un entorno de trabajo Linux." /><published>2024-07-09T00:00:00-06:00</published><updated>2024-07-09T00:00:00-06:00</updated><id>http://localhost:4000/linux/Personalizacion</id><content type="html" xml:base="http://localhost:4000/linux/Personalizacion/"><![CDATA[<h1 id="personalización-de-linux">Personalización de Linux</h1>
<p>Instalación de  <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">ZSH</a> para eso vamos a usar el siguiente comando:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>zsh
</code></pre></div></div>
<p>Opcionalmente, se puede instalar <a href="https://ohmyz.sh/">oh-my-zsh</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="powerlevel10k">Powerlevel10k</h2>
<p>El tema preferido para la terminal es <a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></p>

<p>Guía de instalación.</p>
<ul>
  <li>Fuentes que se deben instalar:
    <ul>
      <li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></li>
      <li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></li>
      <li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf</a></li>
      <li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></li>
    </ul>
  </li>
  <li>Instalación
    <ul>
      <li>Manual:
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
  <span class="nb">echo</span> <span class="s1">'source ~/powerlevel10k/powerlevel10k.zsh-theme'</span> <span class="o">&gt;&gt;</span>~/.zshrc
</code></pre></div>        </div>
      </li>
      <li>Usando Oh My Zsh
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.oh-my-zsh/custom</span><span class="k">}</span>/themes/powerlevel10k
</code></pre></div>        </div>
        <p>En el archivo <code class="language-plaintext highlighter-rouge">~/.zshrc</code> se debe agregar el tema en el caso de a ver usado Oh My Zsh <code class="language-plaintext highlighter-rouge">ZSH_THEME="powerlevel10k/powerlevel10k"</code></p>
      </li>
      <li>Para restaurar ZSH se debe usar el siguiente comando:
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">exec </span>zsh
</code></pre></div>        </div>
      </li>
      <li>Para modificar el tema se usa:
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  p10k configure
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="instalación-de-plugins">Instalación de plugins</h2>
<p>Hay dos plugin muy usados cuáles son:</p>
<ul>
  <li>zsh-autosuggestions
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div>    </div>
  </li>
  <li>zsh-syntax-highlighting
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting 
</code></pre></div>    </div>
  </li>
</ul>

<p>En el archivo <code class="language-plaintext highlighter-rouge">.zshrc</code> se modificará lo siguiente:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>git
    zsh-autosuggestions
    zsh-syntax-highlighting 
<span class="o">)</span>
</code></pre></div></div>

<h2 id="alias-de-bat">Alias de bat</h2>
<p>En este caso se utiliza la herramienta <a href="https://github.com/sharkdp/bat">bat</a> la cual tiene una función parecida al comando cat, sin embargo, este tiene una presentación más elegante y más visual, por lo cual se opta por modificar el comando cat usando el alias en <code class="language-plaintext highlighter-rouge">.zshrc</code></p>

<p>Para la instalación de esta herramienta se puede instalar con el siguiente comando.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>bat
</code></pre></div></div>
<p>o bien se puede descargar la <a href="https://github.com/sharkdp/bat/releases/tag/v0.24.0">última versión</a> para ello se instala de la siguiente manera.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> ./nombre_del_archivo.deb
</code></pre></div></div>
<p>Dentro del archivo <code class="language-plaintext highlighter-rouge">.zshrc</code> se agrega el siguiente alias:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias cat</span><span class="o">=</span><span class="s1">'/bin/bat'</span>
<span class="nb">alias </span><span class="nv">catn</span><span class="o">=</span><span class="s1">'/bin/cat'</span>
<span class="nb">alias  </span><span class="nv">catln</span><span class="o">=</span><span class="s1">'/bin/bat --paging=never'</span>
</code></pre></div></div>
<p>Así es como se ve nuestra terminal usando esta herramienta:</p>
<p align="center">
<img src="/assets/images/PersonalizacionLinux/batcat.png" />
</p>
<p>En algunos casos se necesita copiar cosas de la terminal, así que para eso se configuró otro alias como catn</p>
<p align="center">
<img src="/assets/images/PersonalizacionLinux/batcat2.png" />
</p>

<h2 id="alias-de-lsb">Alias de lsb</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias ls</span><span class="o">=</span><span class="s1">'lsd'</span>
<span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s1">'ls -l'</span>
<span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s1">'ls -a'</span>
<span class="nb">alias </span><span class="nv">lla</span><span class="o">=</span><span class="s1">'ls -la'</span>
<span class="nb">alias </span><span class="nv">lt</span><span class="o">=</span><span class="s1">'ls --tree'</span>
</code></pre></div></div>

<h2 id="configuración-personal-de-zshrc">Configuración personal de .zshrc</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.</span>
<span class="c"># Initialization code that may require console input (password prompts, [y/n]</span>
<span class="c"># confirmations, etc.) must go above this block; everything else may go below.</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-r</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">source</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span>
<span class="k">fi</span>

<span class="c"># If you come from bash you might have to change your $PATH.</span>
<span class="c"># export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH</span>

<span class="c"># Path to your oh-my-zsh installation.</span>
<span class="nb">export </span><span class="nv">ZSH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.oh-my-zsh"</span>

<span class="c"># Set name of the theme to load --- if set to "random", it will</span>
<span class="c"># load a random theme each time oh-my-zsh is loaded, in which case,</span>
<span class="c"># to know which specific one was loaded, run: echo $RANDOM_THEME</span>
<span class="c"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span>
<span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"powerlevel10k/powerlevel10k"</span>

<span class="c">#alias </span>
<span class="nb">alias cat</span><span class="o">=</span><span class="s1">'/bin/bat'</span>
<span class="nb">alias </span><span class="nv">catn</span><span class="o">=</span><span class="s1">'/bin/cat'</span>
<span class="nb">alias  </span><span class="nv">catln</span><span class="o">=</span><span class="s1">'/bin/bat --paging=never'</span>
<span class="c">#configuracion de lsd -&gt; ls</span>
<span class="c">#alias ll='/usr/bin/lsd -lh --group-dirs=first'</span>
<span class="c">#alias la='/usr/bin/lsd -a --group-dirs=first'</span>
<span class="c">#alias l='/usr/bin/lsd --group-dirs=first'</span>
<span class="c">#alias lla='/usr/bin/lsd -lha --group-dirs=first'</span>
<span class="c">#alias ls='/usr/bin/lsd --group-dirs=first'</span>

<span class="c">#echo "Alias de lsd cargados"</span>
<span class="c">#alias ls='lsd'</span>
<span class="c">#alias l='ls -l'</span>
<span class="c">#alias la='ls -a'</span>
<span class="c">#alias lla='ls -la'</span>
<span class="c">#alias lt='ls --tree'</span>


<span class="c"># Set list of themes to pick from when loading at random</span>
<span class="c"># Setting this variable when ZSH_THEME=random will cause zsh to load</span>
<span class="c"># a theme from this variable instead of looking in $ZSH/themes/</span>
<span class="c"># If set to an empty array, this variable will have no effect.</span>
<span class="c"># ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )</span>

<span class="c"># Uncomment the following line to use case-sensitive completion.</span>
<span class="c"># CASE_SENSITIVE="true"</span>

<span class="c"># Uncomment the following line to use hyphen-insensitive completion.</span>
<span class="c"># Case-sensitive completion must be off. _ and - will be interchangeable.</span>
<span class="c"># HYPHEN_INSENSITIVE="true"</span>

<span class="c"># Uncomment one of the following lines to change the auto-update behavior</span>
<span class="c"># zstyle ':omz:update' mode disabled  # disable automatic updates</span>
<span class="c"># zstyle ':omz:update' mode auto      # update automatically without asking</span>
<span class="c"># zstyle ':omz:update' mode reminder  # just remind me to update when it's time</span>

<span class="c"># Uncomment the following line to change how often to auto-update (in days).</span>
<span class="c"># zstyle ':omz:update' frequency 13</span>

<span class="c"># Uncomment the following line if pasting URLs and other text is messed up.</span>
<span class="c"># DISABLE_MAGIC_FUNCTIONS="true"</span>

<span class="c"># Uncomment the following line to disable colors in ls.</span>
<span class="c"># DISABLE_LS_COLORS="true"</span>

<span class="c"># Uncomment the following line to disable auto-setting terminal title.</span>
<span class="c"># DISABLE_AUTO_TITLE="true"</span>

<span class="c"># Uncomment the following line to enable command auto-correction.</span>
<span class="c"># ENABLE_CORRECTION="true"</span>

<span class="c"># Uncomment the following line to display red dots whilst waiting for completion.</span>
<span class="c"># You can also set it to another string to have that shown instead of the default red dots.</span>
<span class="c"># e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"</span>
<span class="c"># Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)</span>
<span class="c"># COMPLETION_WAITING_DOTS="true"</span>

<span class="c"># Uncomment the following line if you want to disable marking untracked files</span>
<span class="c"># under VCS as dirty. This makes repository status check for large repositories</span>
<span class="c"># much, much faster.</span>
<span class="c"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span>

<span class="c"># Uncomment the following line if you want to change the command execution time</span>
<span class="c"># stamp shown in the history command output.</span>
<span class="c"># You can set one of the optional three formats:</span>
<span class="c"># "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span>
<span class="c"># or set a custom format using the strftime function format specifications,</span>
<span class="c"># see 'man strftime' for details.</span>
<span class="c"># HIST_STAMPS="mm/dd/yyyy"</span>

<span class="c"># Would you like to use another custom folder than $ZSH/custom?</span>
<span class="c"># ZSH_CUSTOM=/path/to/new-custom-folder</span>

<span class="c"># Which plugins would you like to load?</span>
<span class="c"># Standad plugins can be found in $ZSH/plugins/</span>
<span class="c"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span>
<span class="c"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
<span class="c"># Add wisely, as too many plugins slow down shell startup.</span>
<span class="nv">plugins</span><span class="o">=(</span>git
	zsh-autosuggestions
	zsh-syntax-highlighting 
<span class="o">)</span>

<span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh



<span class="c"># User configuration</span>
<span class="nv">ZSH_HIGHLIGHT_HIGHLIGHTERS</span><span class="o">=(</span>main brackets pattern cursor<span class="o">)</span>
ZSH_HIGHLIGHT_STYLES[command]<span class="o">=</span><span class="s1">'fg=blue,bold'</span>
ZSH_HIGHLIGHT_STYLES[builtin]<span class="o">=</span><span class="s1">'fg=green,bold'</span>




<span class="c"># export MANPATH="/usr/local/man:$MANPATH"</span>

<span class="c"># You may need to manually set your language environment</span>
<span class="c"># export LANG=en_US.UTF-8</span>

<span class="c"># Preferred editor for local and remote sessions</span>
<span class="c"># if [[ -n $SSH_CONNECTION ]]; then</span>
<span class="c">#   export EDITOR='vim'</span>
<span class="c"># else</span>
<span class="c">#   export EDITOR='mvim'</span>
<span class="c"># fi</span>

<span class="c"># Compilation flags</span>
<span class="c"># export ARCHFLAGS="-arch x86_64"</span>

<span class="c"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span>
<span class="c"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span>
<span class="c"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span>
<span class="c"># For a full list of active aliases, run `alias`.</span>
<span class="c">#</span>
<span class="c"># Example aliases</span>
<span class="c"># alias zshconfig="mate ~/.zshrc"</span>
<span class="c"># alias ohmyzsh="mate ~/.oh-my-zsh"</span>
<span class="nb">alias ls</span><span class="o">=</span><span class="s1">'lsd'</span>
<span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s1">'ls -l'</span>
<span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s1">'ls -a'</span>
<span class="nb">alias </span><span class="nv">lla</span><span class="o">=</span><span class="s1">'ls -la'</span>
<span class="nb">alias </span><span class="nv">lt</span><span class="o">=</span><span class="s1">'ls --tree'</span>

<span class="c"># To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.</span>
<span class="o">[[</span> <span class="o">!</span> <span class="nt">-f</span> ~/.p10k.zsh <span class="o">]]</span> <span class="o">||</span> <span class="nb">source</span> ~/.p10k.zsh


<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class="si">)</span><span class="s2">"</span>
<span class="c"># Instalar gemas en ~/.gem</span>
<span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gem"</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gem/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>]]></content><author><name>Eduardo Rivera</name></author><category term="Linux" /><category term="Linux" /><category term="Personalización" /><summary type="html"><![CDATA[En este post es mi personalización personal de un sistema operativo Linux de las herramientas más usadas y las más cómodas.]]></summary></entry><entry><title type="html">Maquina Headless</title><link href="http://localhost:4000/hackthebox/Maquina-Headless/" rel="alternate" type="text/html" title="Maquina Headless" /><published>2024-06-30T00:00:00-06:00</published><updated>2024-06-30T00:00:00-06:00</updated><id>http://localhost:4000/hackthebox/Maquina-Headless</id><content type="html" xml:base="http://localhost:4000/hackthebox/Maquina-Headless/"><![CDATA[<p align="center">
<img src="/assets/images/MaquinaHeadless/Aspose.Words.c51fa9d9-6a10-477b-b35c-8f7240e81596.001.png" />
</p>

<p>En esta máquina primero que nada se tuvo que hacer un análisis para poder obtener información sobre los puertos que estaba abierto para ello se llevó a cabo el uso NMAP, en el cual se hace con el siguiente comando:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-p-</span> <span class="nt">-sC</span> <span class="nt">-vvv</span> –min-rate 5000 <span class="nt">-n</span> 10.10.11.8 
</code></pre></div></div>

<ul>
  <li>
    <p><strong>-p-</strong>: Este parámetro indica que Nmap debe escanear todos los puertos, del 1 al 65535. Normalmente, Nmap escanea solo los 1000 puertos más comunes si no se especifica ningún rango de puertos.</p>
  </li>
  <li>
    <p><strong>-sC</strong>: Este parámetro habilita el uso de los scripts Nmap Scripting Engine (NSE) con la opción de script predeterminado. Los scripts NSE pueden realizar una variedad de tareas, como la detección de versiones de servicios y la identificación de vulnerabilidades.</p>
  </li>
  <li>
    <p><strong>-vvv</strong>: Este parámetro aumenta la verbosidad del escaneo, proporcionando información detallada sobre el progreso del escaneo y los resultados. Cuantos más “v” se añadan, más detallada será la salida.</p>
  </li>
  <li>
    <p><strong>–-min-rate 5000</strong>: Este parámetro establece la tasa mínima de paquetes por segundo que Nmap debería enviar, en este caso, 5000 paquetes por segundo. Esto hace que el escaneo sea más rápido, pero puede generar tráfico de red considerable y posiblemente ser detectado como un comportamiento sospechoso por sistemas de detección de intrusos (IDS).</p>
  </li>
  <li>
    <p><strong>-n</strong>: Este parámetro deshabilita la resolución de nombres de dominio inversa. Esto significa que Nmap no intentará resolver direcciones IP a nombres de host, lo que puede acelerar el escaneo.</p>
  </li>
</ul>

<p><strong>Resultados obtenidos:</strong></p>

<p align="center">
<img src="/assets/images/MaquinaHeadless/Aspose.Words.c51fa9d9-6a10-477b-b35c-8f7240e81596.002.png" />
</p>

<p>En la captura podemos ver que solo tenemos abiertos dos puertos el cual uno es el puerto 22 y el otro el 5000, cual sabemos las siguientes características:</p>

<p><strong>Puerto 22</strong></p>

<ul>
  <li><strong>Protocolo:</strong> TCP</li>
  <li><strong>Servicio común:</strong> SSH (Secure Shell)</li>
  <li><a name="_int_ahikk2d5"></a><strong>Uso principal:</strong> El puerto 22 es conocido por el protocolo SSH, que proporciona una forma segura de conectarse a otro ordenador a través de una red no segura. SSH permite el acceso remoto a servidores, la transferencia segura de archivos mediante SCP (Secure Copy) y SFTP (SSH File Transfer Protocol), así como la ejecución remota de comandos. SSH es esencial en la administración de sistemas y servidores, especialmente en entornos Linux y Unix.</li>
</ul>

<p><strong>Puerto 5000</strong></p>

<ul>
  <li><strong>Protocolo:</strong> TCP/UDP</li>
  <li><strong>Servicios comunes:</strong>
    <ul>
      <li><strong>UPnP (Universal Plug and Play):</strong> Este protocolo, utilizado principalmente en redes domésticas, permite que dispositivos en una red se descubran y se comuniquen automáticamente entre sí. UPnP facilita la configuración de redes y la conectividad entre dispositivos sin intervención manual significativa.</li>
      <li><strong>Docker:</strong> En el contexto de Docker, un sistema de contenedores de aplicaciones, el puerto 5000 se usa comúnmente como el puerto predeterminado para el registro privado de Docker (Docker Registry). Un Docker Registry es un repositorio para almacenar y distribuir imágenes Docker.</li>
      <li><strong>Flask:</strong> En el desarrollo web con Python, el marco Flask puede usar el puerto 5000 como su puerto predeterminado para ejecutar aplicaciones web durante el desarrollo.</li>
    </ul>
  </li>
  <li><strong>Uso principal:</strong> Dado que el puerto 5000 no está asignado de manera oficial a un servicio específico por la IANA (Internet Assigned Numbers Authority), puede ser utilizado por diferentes aplicaciones y servicios según las necesidades de los usuarios y desarrolladores. Sin embargo, los usos mencionados arriba son algunos de los más comunes.</li>
</ul>

<p>A continuación, procedemos a obtener más información de los puertos usando nmap esto se hace principalmente para que no se demore demasiado tiempo en obtener la información:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-p22</span>,5000 <span class="nt">-A</span> <span class="nt">-Pn</span> <span class="nt">-vvv</span> 10.10.11.8
</code></pre></div></div>

<ul>
  <li><strong>-p22,5000</strong>: Esta opción especifica los puertos que deseas escanear. En este caso, Nmap escaneará los puertos 22 (usualmente usado por SSH) y 5000. Puedes especificar un rango de puertos o una lista separada por comas.</li>
  <li><strong>-A</strong>: Esta opción activa la detección avanzada. Incluirá:
    <ol>
      <li>Detección de sistema operativo.</li>
      <li>Detección de versión de servicio.</li>
      <li>Escaneo de scripts.</li>
      <li>Rastreo de ruta (traceroute).</li>
    </ol>
  </li>
  <li><strong>-Pn</strong>: Esta opción le dice a Nmap que no haga un “ping” previo a los hosts para ver si están activos. Por defecto, Nmap hace un ping para determinar si un host está activo antes de escanearlo. Con -Pn, Nmap escaneará los puertos incluso si el host no responde a los pings.</li>
</ul>

<p align="center">
<img src="/assets/images/MaquinaHeadless/Aspose.Words.c51fa9d9-6a10-477b-b35c-8f7240e81596.005.png" />
</p>

<p>En esta captura podemos ver algo interesante, primero que nada, podemos ver que en el puerto 22 si bien nos muestra la versión en el cual está trabajando el problema radica que no hay vulnerabilidad aparente, es decir si va al internet no hay ningún tipo de exploit que se puede usar para conectarse, así que el único puerto que queda disponible es el 5000 sin embargo este solo se usa para alojar el acceso a la página web así que no hay manera de explotar una vulnerabilidad.</p>

<p>Solo queda ingresar a la página:</p>

<p align="center">
<img src="/assets/images/MaquinaHeadless/Aspose.Words.c51fa9d9-6a10-477b-b35c-8f7240e81596.004.png" />
</p>

<p>En este caso procedemos a buscar páginas que puedan estar ocultas apartir de la URL, para eso usamos FUZZ</p>

<p align="center">
<img src="/assets/images/MaquinaHeadless/Aspose.Words.c51fa9d9-6a10-477b-b35c-8f7240e81596.003.png" />
</p>]]></content><author><name>Eduardo Rivera</name></author><category term="HackTheBox" /><category term="puerto 5000" /><category term="nmap" /><summary type="html"><![CDATA[Abordando el desafío de la máquina Headless en HackTheBox: una intrigante aventura que, aunque aparentemente sencilla, esconde múltiples desafíos y lecciones clave.]]></summary></entry></feed>